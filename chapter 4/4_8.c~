#include<stdio.h>
#include<ctype.h>
#define MAXVAL 100
#define MAXOP 100
#define NUMBER '0'
int sp;
double val [MAXVAL];
char buf='\0';
int getch(void)
{
	return buf!='\0'?buf:getchar();
}
void ungetch(int c)
{
	if(buf!='\0')
		printf("ungetch too many characters");
	else
		buf=c;
}
void push(double n)
{
	if(sp>MAXVAL)
		printf("stack overflow");
	else
		val[sp++]=n;
	//printf("%d",stack[top-1]);
}
double pop ()
{
	if(sp<0)
		printf("stack empty");
	else
		return val[--sp];
}
int getop(char s[])
{
	int i,c;
	while((s[0]=c=getch())==' ' || c=='\t')
		;
	s[1]='\0';
	if(!isdigit(c)&&c!='.')
		return c;
	i=0;
	if(isdigit(c))
		while(isdigit(s[++i]=c=getch()))
			;
	if(c=='.')
		while(isdigit(s[++i]=c=getch()))
			;
	s[i]='\0';
	if(c!=EOF)
		ungetch(c);
	return NUMBER;
}
void main()
{
	int type;
	double ext;
	char s[MAXOP];
	while((type=getop(s))!=EOF)
	{
		switch(type)
		{
			case NUMBER: push(atof(s));
				break;
			case '+': push(pop()+pop());
				break;
			case '*': push(pop()*pop());
				break;
			case '-': ext=pop();
				push(pop()-ext);
				break;
			case '/': ext=pop();
				push(pop()/ext);
				break;
			case '\n': printf("\n%f",pop());
				break;
		}
	}
}
